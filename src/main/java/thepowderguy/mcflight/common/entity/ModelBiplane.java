package thepowderguy.mcflight.common.entity;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.entity.Entity;
import thepowderguy.mcflight.math.Vec3;

// Date: 12/16/2016 10:09:13 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX







public class ModelBiplane extends ModelBase
{
	//fields
	BiplaneModelRenderer WingTop;
	BiplaneModelRenderer WingBottom;
	BiplaneModelRenderer FuselageLeft;
	BiplaneModelRenderer FuselageRight;
	BiplaneModelRenderer EnginePanel;
	BiplaneModelRenderer FuselageBottom;
	BiplaneModelRenderer TailBottom;
	BiplaneModelRenderer FuselageCover;
	BiplaneModelRenderer ElevatorLeft;
	BiplaneModelRenderer ElevatorLeftAlt;
	BiplaneModelRenderer ElevatorRight;
	BiplaneModelRenderer ElevatorRightAlt;
	BiplaneModelRenderer SupportStrut1;
	BiplaneModelRenderer SupportStrut2;
	BiplaneModelRenderer SupportStrut3;
	BiplaneModelRenderer SupportStrut4;
	BiplaneModelRenderer SupportStrut5;
	BiplaneModelRenderer SupportStrut6;
	BiplaneModelRenderer SupportStrut7;
	BiplaneModelRenderer SupportStrut8;
	BiplaneModelRenderer WheelSupport1;
	BiplaneModelRenderer Wheel1;
	BiplaneModelRenderer WheelSupport2;
	BiplaneModelRenderer Wheel2;
	BiplaneModelRenderer WheelSupport3;
	BiplaneModelRenderer Wheel3;
	BiplaneModelRenderer Fuselage1;
	BiplaneModelRenderer Fuselage3;
	BiplaneModelRenderer Fuselage2;
	BiplaneModelRenderer Fuselage4;
	BiplaneModelRenderer Fuselage5;
	BiplaneModelRenderer Fuselage6;
	BiplaneModelRenderer Propeller1;
	BiplaneModelRenderer Propeller2;
	BiplaneModelRenderer PropellerAxis;
	BiplaneModelRenderer ElevatorR;
	BiplaneModelRenderer ElevatorL;
	BiplaneModelRenderer Rudder;
	BiplaneModelRenderer RudderTri1;
	BiplaneModelRenderer RudderTri2;
	BiplaneModelRenderer RudderTri3;
	BiplaneModelRenderer AlieronL;
	BiplaneModelRenderer AlieronR;
	BiplaneModelRenderer ElevModelL;
	BiplaneModelRenderer ElevModelR;
	ModelRenderer FuselageT;

	public ModelBiplane()
	{
		textureWidth = 256;
		textureHeight = 256;

		WingTop = new BiplaneModelRenderer(this, 0, 0);
		WingTop.addBox(-50F, 0F, 1F, 100, 1, 19);
		WingTop.setRotationPoint(0F, -16F, -11F);
		WingTop.setTextureSize(256, 256);
		WingTop.mirror = true;
		setRotation(WingTop, 0F, 0F, 0F);
		WingBottom = new BiplaneModelRenderer(this, 0, 0);
		WingBottom.addBox(-50F, -0.1F, 1F, 100, 1, 19);
		WingBottom.setRotationPoint(0F, 0F, -11F);
		WingBottom.setTextureSize(256, 256);
		WingBottom.mirror = true;
		setRotation(WingBottom, 0F, 0F, 0F);
		FuselageLeft = new BiplaneModelRenderer(this, 0, 0);
		FuselageLeft.addBox(0F, -7F, 0F, 1, 11, 28);
		FuselageLeft.setRotationPoint(-7F, -3F, -11F);
		FuselageLeft.setTextureSize(256, 256);
		FuselageLeft.mirror = true;
		setRotation(FuselageLeft, 0F, 0F, 0F);
		FuselageRight = new BiplaneModelRenderer(this, 0, 0);
		FuselageRight.addBox(0F, 0F, 0F, 1, 10, 28);
		FuselageRight.setRotationPoint(6F, -10F, -11F);
		FuselageRight.setTextureSize(256, 256);
		FuselageRight.mirror = true;
		setRotation(FuselageRight, 0F, 0F, 0F);
		EnginePanel = new BiplaneModelRenderer(this, 0, 48);
		EnginePanel.addBox(-7F, 0F, 0F, 12, 10, 1);
		EnginePanel.setRotationPoint(1F, -10F, 16F);
		EnginePanel.setTextureSize(256, 256);
		EnginePanel.mirror = true;
		setRotation(EnginePanel, 0F, 0F, 0F);
		FuselageBottom = new BiplaneModelRenderer(this, 0, 0);
		FuselageBottom.addBox(-7F, 0F, 0F, 14, 1, 28);
		FuselageBottom.setRotationPoint(0F, 0F, -11F);
		FuselageBottom.setTextureSize(256, 256);
		FuselageBottom.mirror = true;
		setRotation(FuselageBottom, 0F, 0F, 0F);
		TailBottom = new BiplaneModelRenderer(this, 0, 0);
		TailBottom.addBox(-5F, -0.5F, -16F, 10, 3, 16);
		TailBottom.setRotationPoint(0F, -3F, -28F);
		TailBottom.setTextureSize(256, 256);
		TailBottom.mirror = true;
		setRotation(TailBottom, -0.1764951F, 0F, 0F);
		FuselageCover = new BiplaneModelRenderer(this, 0, 0);
		FuselageCover.addBox(-7F, -2F, -16F, 12, 1, 18);
		FuselageCover.setRotationPoint(1F, -8F, -13F);
		FuselageCover.setTextureSize(256, 256);
		FuselageCover.mirror = true;
		setRotation(FuselageCover, 0.0349066F, 0F, 0F);
		ElevatorLeft = new BiplaneModelRenderer(this, 0, 0);
		ElevatorLeft.addBox(-21F, 0.05F, 0F, 16, 1, 3);
		ElevatorLeft.setRotationPoint(1F, -6F, -32F);
		ElevatorLeft.setTextureSize(256, 256);
		ElevatorLeft.mirror = true;
		setRotation(ElevatorLeft, 0F, -0.4164007F, 0F);
		ElevatorLeftAlt = new BiplaneModelRenderer(this, 0, 0);
		ElevatorLeftAlt.addBox(-19.5F, 0F, 0F, 15, 1, 3);
		ElevatorLeftAlt.setRotationPoint(0F, -6F, -40.7F);
		ElevatorLeftAlt.setTextureSize(256, 256);
		ElevatorLeftAlt.mirror = true;
		setRotation(ElevatorLeftAlt, 0F, 0F, 0F);
		ElevatorRight = new BiplaneModelRenderer(this, 0, 0);
		ElevatorRight.addBox(-15F, 0.1F, -3F, 9, 1, 3);
		ElevatorRight.setRotationPoint(-2F, -6F, -34.3F);
		ElevatorRight.setTextureSize(256, 256);
		ElevatorRight.mirror = true;
		setRotation(ElevatorRight, 0F, -2.725192F, 0F);
		ElevatorRightAlt = new BiplaneModelRenderer(this, 0, 0);
		ElevatorRightAlt.addBox(-0.5F, 0F, 0F, 16, 1, 3);
		ElevatorRightAlt.setRotationPoint(4.2F, -6F, -40.7F);
		ElevatorRightAlt.setTextureSize(256, 256);
		ElevatorRightAlt.mirror = true;
		setRotation(ElevatorRightAlt, 0F, 0F, 0F);
		SupportStrut1 = new BiplaneModelRenderer(this, 16, 64);
		SupportStrut1.addBox(0F, -14F, 0F, 1, 15, 1);
		SupportStrut1.setRotationPoint(-41F, -1F, -7F);
		SupportStrut1.setTextureSize(256, 256);
		SupportStrut1.mirror = true;
		setRotation(SupportStrut1, 0F, 0F, 0F);
		SupportStrut2 = new BiplaneModelRenderer(this, 16, 64);
		SupportStrut2.addBox(0F, -14F, 0F, 1, 15, 1);
		SupportStrut2.setRotationPoint(-41F, -1F, 6F);
		SupportStrut2.setTextureSize(256, 256);
		SupportStrut2.mirror = true;
		setRotation(SupportStrut2, 0F, 0F, 0F);
		SupportStrut3 = new BiplaneModelRenderer(this, 16, 64);
		SupportStrut3.addBox(0F, -14F, 0F, 1, 15, 1);
		SupportStrut3.setRotationPoint(41F, -1F, -8F);
		SupportStrut3.setTextureSize(256, 256);
		SupportStrut3.mirror = true;
		setRotation(SupportStrut3, 0F, 0F, 0F);
		SupportStrut4 = new BiplaneModelRenderer(this, 16, 64);
		SupportStrut4.addBox(0F, -14F, 0F, 1, 15, 1);
		SupportStrut4.setRotationPoint(41F, -1F, 6F);
		SupportStrut4.setTextureSize(256, 256);
		SupportStrut4.mirror = true;
		setRotation(SupportStrut4, 0F, 0F, 0F);
		SupportStrut5 = new BiplaneModelRenderer(this, 16, 64);
		SupportStrut5.addBox(0F, 0F, 0F, 1, 5, 1);
		SupportStrut5.setRotationPoint(6F, -15F, -5F);
		SupportStrut5.setTextureSize(256, 256);
		SupportStrut5.mirror = true;
		setRotation(SupportStrut5, 0F, 0F, 0F);
		SupportStrut6 = new BiplaneModelRenderer(this, 16, 64);
		SupportStrut6.addBox(0F, 0F, 0F, 1, 5, 1);
		SupportStrut6.setRotationPoint(6F, -15F, 5F);
		SupportStrut6.setTextureSize(256, 256);
		SupportStrut6.mirror = true;
		setRotation(SupportStrut6, 0F, 0F, 0F);
		SupportStrut7 = new BiplaneModelRenderer(this, 16, 64);
		SupportStrut7.addBox(0F, 0F, 0F, 1, 5, 1);
		SupportStrut7.setRotationPoint(-7F, -15F, -3F);
		SupportStrut7.setTextureSize(256, 256);
		SupportStrut7.mirror = true;
		setRotation(SupportStrut7, 0F, 0F, 0F);
		SupportStrut8 = new BiplaneModelRenderer(this, 16, 64);
		SupportStrut8.addBox(0F, 0F, 0F, 1, 5, 1);
		SupportStrut8.setRotationPoint(-7F, -15F, 5F);
		SupportStrut8.setTextureSize(256, 256);
		SupportStrut8.mirror = true;
		setRotation(SupportStrut8, 0F, 0F, 0F);
		WheelSupport1 = new BiplaneModelRenderer(this, 0, 0);
		WheelSupport1.addBox(0F, 0F, 0F, 1, 7, 1);
		WheelSupport1.setRotationPoint(-5F, 1F, 7F);
		WheelSupport1.setTextureSize(256, 256);
		WheelSupport1.mirror = true;
		setRotation(WheelSupport1, 0F, 0F, 0F);
		Wheel1 = new BiplaneModelRenderer(this, 0, 85);
		Wheel1.addBox(0F, 0F, 0F, 1, 5, 5);
		Wheel1.setRotationPoint(-6F, 5F, 5F);
		Wheel1.setTextureSize(256, 256);
		Wheel1.mirror = true;
		setRotation(Wheel1, 0F, 0F, 0F);
		WheelSupport2 = new BiplaneModelRenderer(this, 0, 0);
		WheelSupport2.addBox(0F, 0F, 0F, 1, 7, 1);
		WheelSupport2.setRotationPoint(4F, 1F, 7F);
		WheelSupport2.setTextureSize(256, 256);
		WheelSupport2.mirror = true;
		setRotation(WheelSupport2, 0F, 0F, 0F);
		Wheel2 = new BiplaneModelRenderer(this, 0, 85);
		Wheel2.addBox(0F, 0F, 0F, 1, 5, 5);
		Wheel2.setRotationPoint(5F, 5F, 5F);
		Wheel2.setTextureSize(256, 256);
		Wheel2.mirror = true;
		setRotation(Wheel2, 0F, 0F, 0F);
		WheelSupport3 = new BiplaneModelRenderer(this, 0, 0);
		WheelSupport3.addBox(0F, 0F, 0F, 1, 3, 1);
		WheelSupport3.setRotationPoint(0F, -3F, -39F);
		WheelSupport3.setTextureSize(256, 256);
		WheelSupport3.mirror = true;
		setRotation(WheelSupport3, 0F, 0F, 0F);
		Wheel3 = new BiplaneModelRenderer(this, 4, 77);
		Wheel3.addBox(0F, 0F, 0F, 1, 3, 3);
		Wheel3.setRotationPoint(0F, 0F, -40F);
		Wheel3.setTextureSize(256, 256);
		Wheel3.mirror = true;
		setRotation(Wheel3, 0F, 0F, 0F);
		Fuselage1 = new BiplaneModelRenderer(this, 0, 0);
		Fuselage1.addBox(-6F, 0F, -18F, 12, 2, 18);
		Fuselage1.setRotationPoint(0F, -1F, -10.7F);
		Fuselage1.setTextureSize(256, 256);
		Fuselage1.mirror = true;
		setRotation(Fuselage1, -0.0872665F, 0F, 0F);
		Fuselage3 = new BiplaneModelRenderer(this, 0, 0);
		Fuselage3.addBox(0F, -5F, -18F, 1, 9, 18);
		Fuselage3.setRotationPoint(-7F, -4.5F, -11F);
		Fuselage3.setTextureSize(256, 256);
		Fuselage3.mirror = true;
		setRotation(Fuselage3, 0F, -0.0698132F, 0F);
		Fuselage2 = new BiplaneModelRenderer(this, 0, 0);
		Fuselage2.addBox(-5F, -0.5F, -16F, 10, 3, 15);
		Fuselage2.setRotationPoint(0F, -9F, -28F);
		Fuselage2.setTextureSize(256, 256);
		Fuselage2.mirror = true;
		setRotation(Fuselage2, 0.0743572F, 0F, 0F);
		Fuselage4 = new BiplaneModelRenderer(this, 0, 0);
		Fuselage4.addBox(0F, -5F, -18F, 1, 9, 18);
		Fuselage4.setRotationPoint(6F, -4.5F, -11F);
		Fuselage4.setTextureSize(256, 256);
		Fuselage4.mirror = true;
		setRotation(Fuselage4, 0F, 0.0698132F, 0F);
		Fuselage5 = new BiplaneModelRenderer(this, 0, 0);
		Fuselage5.addBox(0.2F, -3F, -10F, 1, 6, 10);
		Fuselage5.setRotationPoint(-6F, -5.5F, -29F);
		Fuselage5.setTextureSize(256, 256);
		Fuselage5.mirror = true;
		setRotation(Fuselage5, 0F, -0.1115358F, 0F);
		Fuselage6 = new BiplaneModelRenderer(this, 0, 0);
		Fuselage6.addBox(-0.2F, -3F, -10F, 1, 6, 10);
		Fuselage6.setRotationPoint(5F, -5.5F, -29F);
		Fuselage6.setTextureSize(256, 256);
		Fuselage6.mirror = true;
		setRotation(Fuselage6, 0F, 0.111544F, 0F);
		Propeller1 = new BiplaneModelRenderer(this, 0, 64);
		Propeller1.addBox(-1.5F, 1F, -0.5F, 3, 9, 1);
		Propeller1.setRotationPoint(0F, -4F, 19.5F);
		Propeller1.setTextureSize(256, 256);
		Propeller1.mirror = true;
		setRotation(Propeller1, 0F, 0F, 0F);
		Propeller2 = new BiplaneModelRenderer(this, 0, 64);
		Propeller2.addBox(-1.5F, -10F, -0.5F, 3, 9, 1);
		Propeller2.setRotationPoint(0F, -4F, 19.5F);
		Propeller2.setTextureSize(256, 256);
		Propeller2.mirror = true;
		setRotation(Propeller2, 0F, 0F, 0F);
		PropellerAxis = new BiplaneModelRenderer(this, 16, 64);
		PropellerAxis.addBox(-1F, -1F, 0F, 2, 2, 4);
		PropellerAxis.setRotationPoint(0F, -4F, 17F);
		PropellerAxis.setTextureSize(256, 256);
		PropellerAxis.mirror = true;
		setRotation(PropellerAxis, 0F, 0F, 0F);
		ElevatorR = new BiplaneModelRenderer(this, 0, 0);
		ElevatorR.addBox(-7.5F, -0.5F, -6F, 15, 1, 6);
		ElevatorR.setRotationPoint(12F, -5.5F, -40.7F);
		ElevatorR.setTextureSize(256, 256);
		ElevatorR.mirror = true;
		setRotation(ElevatorR, 0F, 0F, 0F);
		ElevatorL = new BiplaneModelRenderer(this, 0, 0);
		ElevatorL.addBox(-7.5F, -0.5F, -6F, 15, 1, 6);
		ElevatorL.setRotationPoint(-12F, -5.5F, -40.7F);
		ElevatorL.setTextureSize(256, 256);
		ElevatorL.mirror = true;
		setRotation(ElevatorL, 0F, 0F, 0F);
		Rudder = new BiplaneModelRenderer(this, 0, 0);
		Rudder.addBox(-0.5F, -2.5F, -4F, 1, 11, 4);
		Rudder.setRotationPoint(0.5F, -12.8F, -44.5F);
		Rudder.setTextureSize(256, 256);
		Rudder.mirror = true;
		setRotation(Rudder, 0F, 0F, 0F);
		RudderTri1 = new BiplaneModelRenderer(this, 0, 0);
		RudderTri1.addBox(0.01F, -2F, 0.1F, 1, 3, 10);
		RudderTri1.setRotationPoint(0F, -14F, -44F);
		RudderTri1.setTextureSize(256, 256);
		RudderTri1.mirror = true;
		setRotation(RudderTri1, -0.8922867F, 0F, 0F);
		RudderTri2 = new BiplaneModelRenderer(this, 0, 0);
		RudderTri2.addBox(0.01F, 1F, 2.766667F, 1, 2, 4);
		RudderTri2.setRotationPoint(0F, -14F, -44F);
		RudderTri2.setTextureSize(256, 256);
		RudderTri2.mirror = true;
		setRotation(RudderTri2, -0.8922867F, 0F, 0F);
		RudderTri3 = new BiplaneModelRenderer(this, 0, 0);
		RudderTri3.addBox(0F, -2.5F, -7F, 1, 11, 2);
		RudderTri3.setRotationPoint(0F, -12.8F, -37.5F);
		RudderTri3.setTextureSize(256, 256);
		RudderTri3.mirror = true;
		setRotation(RudderTri3, 0F, 0F, 0F);
		AlieronL = new BiplaneModelRenderer(this, 0, 0);
		AlieronL.addBox(0F, -0.5F, -4F, 14, 1, 4);
		AlieronL.setRotationPoint(-30F, 0.5F, -10F);
		AlieronL.setTextureSize(256, 256);
		AlieronL.mirror = true;
		setRotation(AlieronL, 0F, 0F, 0F);
		AlieronR = new BiplaneModelRenderer(this, 0, 0);
		AlieronR.addBox(0F, -0.5F, -4F, 14, 1, 4);
		AlieronR.setRotationPoint(16F, 0.5F, -10F);
		AlieronR.setTextureSize(256, 256);
		AlieronR.mirror = true;
		setRotation(AlieronR, 0F, 0F, 0F);
		ElevModelL = new BiplaneModelRenderer(this, 0, 0);
		ElevModelL.addBox(-15F, 0.05F, -3F, 9, 1, 3);
		ElevModelL.setRotationPoint(1F, -6F, -32F);
		ElevModelL.setTextureSize(256, 256);
		ElevModelL.mirror = true;
		setRotation(ElevModelL, 0F, -0.4164007F, 0F);
		ElevModelR = new BiplaneModelRenderer(this, 0, 0);
		ElevModelR.addBox(-21F, 0.1F, -6F, 16, 1, 3);
		ElevModelR.setRotationPoint(-2F, -6F, -34.3F);
		ElevModelR.setTextureSize(256, 256);
		ElevModelR.mirror = true;
		setRotation(ElevModelR, 0F, -2.725192F, 0F);
		FuselageT = new BiplaneModelRenderer(this, 0, 0);
		FuselageT.addBox(0F, 0F, 0F, 12, 1, 8);
		FuselageT.setRotationPoint(-6F, -10F, 8F);
		FuselageT.setTextureSize(256, 256);
		FuselageT.mirror = true;
		setRotation(FuselageT, 0F, 0F, 0F);
	}

	public void render(EntityAirplane entity, float f, float f1, float f2, float f3, float f4, float f5, float partialTicks)
	{
		super.render(entity, f, f1, f2, f3, f4, f5);
		setRotationAngles(f, f1, f2, f3, f4, f5, entity);
		Vec3 controlPositions = entity.getInterpolatedControlSurfaces(partialTicks);
		setControlSurfaceRotations((float)controlPositions.z, (float)controlPositions.y, (float)controlPositions.x,(float)( entity.prevProppos+(entity.propPos-entity.prevProppos)*partialTicks));
		SupportStrut1.render(f5);
		SupportStrut2.render(f5);
		SupportStrut3.render(f5);
		SupportStrut4.render(f5);
		SupportStrut5.render(f5);
		SupportStrut6.render(f5);
		SupportStrut7.render(f5);
		SupportStrut8.render(f5);
		Wheel1.render(f5);
		Wheel2.render(f5);
		Wheel3.render(f5);
		Propeller1.render(f5);
		Propeller2.render(f5);
		PropellerAxis.render(f5);
		
		float[] f_col = AirplaneColors.getDyeRgb(entity.getFuselageColor());
		GlStateManager.color(f_col[0], f_col[1], f_col[2]);
		EnginePanel.render(f5);
		FuselageLeft.render(f5);
		FuselageRight.render(f5);
		FuselageBottom.render(f5);
		TailBottom.render(f5);
		FuselageCover.render(f5);
		WheelSupport1.render(f5);
		WheelSupport2.render(f5);
		WheelSupport3.render(f5);
		Fuselage1.render(f5);
		Fuselage3.render(f5);
		Fuselage2.render(f5);
		Fuselage4.render(f5);
		Fuselage5.render(f5);
		Fuselage6.render(f5);
		FuselageT.render(f5);

		float[] w_col = AirplaneColors.getDyeRgb(entity.getWingColor());
		GlStateManager.color(w_col[0], w_col[1], w_col[2]);
		WingTop.render(f5);
		WingBottom.render(f5);
		ElevatorLeft.render(f5);
		ElevatorLeftAlt.render(f5);
		ElevatorRight.render(f5);
		ElevatorRightAlt.render(f5);
		ElevatorR.render(f5);
		ElevatorL.render(f5);
		Rudder.render(f5);
		RudderTri1.render(f5);
		RudderTri2.render(f5);
		RudderTri3.render(f5);
		AlieronL.render(f5);
		AlieronR.render(f5);
		ElevModelL.render(f5);
		ElevModelR.render(f5);
			
	}

	public void setControlSurfaceRotations(float alierons, float elevators, float rudder, float proppos) {
		setRotation(AlieronL, alierons, 0, 0);
		setRotation(AlieronR, -alierons, 0, 0);
		setRotation(ElevatorL, elevators, 0, 0);
		setRotation(ElevatorR, elevators, 0, 0);
		setRotation(Rudder, 0, rudder, 0);
		setRotation(Propeller1, 0, 0, proppos);
		setRotation(Propeller2, 0, 0, proppos);

	}

	private void setRotation(ModelRenderer model, float x, float y, float z)
	{
		model.rotateAngleX = x;
		model.rotateAngleY = y;
		model.rotateAngleZ = z;
	}

	public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity e)
	{
		super.setRotationAngles(f, f1, f2, f3, f4, f5, e);
	}

}

class BiplaneModelRenderer extends ModelRenderer {

	public BiplaneModelRenderer(ModelBase model, int texOffX, int texOffY)
	{
		super(model, texOffX, texOffY);
		//offsetZ = RenderBiplane.scale * -11f/16f;
		offsetY = RenderBiplane.scale * 5f/16f;
	}

}